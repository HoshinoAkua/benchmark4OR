import json
from gurobipy import Model, GRB

# Transportation Problem with Water Quality Constraints
# Problem type: LP
# Domain: water_resource_management
# Variant description: This variant considers water quality constraints. Each reservoir has a certain water quality index, and each field requires a minimum water quality. The transportation plan must ensure that the water quality requirements of the fields are met.

# Read data
with open('data.json', 'r') as f:
    data = json.load(f)

### Read parameters from data
reservoirs = data['reservoirs']  # the available amount of water in each reservoir
fields = data['fields']  # the required amount of water for each field
costs = data['costs']  # the transportation cost per unit of water from each reservoir to each field
quality = data['quality']  # the water quality index of each reservoir
min_quality = data['min_quality']  # the minimum water quality required by each field

### Get hyperparameters
R = len(reservoirs)  # number of reservoirs
F = len(fields)  # number of fields

# Create a new model
model = Model("Transportation Problem with Water Quality Constraints")

### Add variables
# The amount of water transported from reservoir i to field j
x = model.addVars(R, F, vtype=GRB.CONTINUOUS, name="x")

### Set objective
# Minimize total transportation cost
model.setObjective(sum(costs[i][j] * x[i, j] for i in range(R) for j in range(F)), GRB.MINIMIZE)

### Add constraints
# The total amount of water transported from each reservoir cannot exceed its capacity
for i in range(R):
    model.addConstr(sum(x[i, j] for j in range(F)) <= reservoirs[i], name=f"ReservoirCapacity_{i}")

# The total amount of water received by each field must meet its requirement
for j in range(F):
    model.addConstr(sum(x[i, j] for i in range(R)) >= fields[j], name=f"FieldRequirement_{j}")

# The average water quality received by each field must meet its minimum requirement
for j in range(F):
    model.addConstr(
        sum(quality[i] * x[i, j] for i in range(R)) / sum(x[i, j] for i in range(R)) >= min_quality[j],
        name=f"FieldQuality_{j}"
    )

# Save the model as a '.lp' file.
model.write('model.lp')