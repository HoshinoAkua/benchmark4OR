from gurobipy import Model, GRB
import json

# Load data from JSON file
with open('data.json', 'r') as file:
    data = json.load(file)

supply = data['supply']
demand = data['demand']
cost = data['cost']
renewable_supply = data['renewable_supply']
penalty_cost = data['penalty_cost']

num_power_plants = len(supply)
num_regions = len(demand)
num_renewable_sources = len(renewable_supply)

# Create a new model
model = Model("energy_distribution")

# Decision variables
x = model.addVars(num_power_plants, num_regions, name="x", lb=0)
y = model.addVars(num_renewable_sources, num_regions, name="y", lb=0)
unmet_demand = model.addVars(num_regions, name="unmet_demand", lb=0)

# Objective function: Minimize total cost
transmission_cost = sum(cost[i][j] * x[i, j] for i in range(num_power_plants) for j in range(num_regions))
penalty_cost_total = sum(penalty_cost[j] * unmet_demand[j] for j in range(num_regions))
model.setObjective(transmission_cost + penalty_cost_total, GRB.MINIMIZE)

# Constraints
# Supply constraints for power plants
for i in range(num_power_plants):
    model.addConstr(sum(x[i, j] for j in range(num_regions)) <= supply[i], name=f"supply_constraint_{i}")

# Supply constraints for renewable sources
for k in range(num_renewable_sources):
    model.addConstr(sum(y[k, j] for j in range(num_regions)) <= renewable_supply[k], name=f"renewable_supply_constraint_{k}")

# Demand constraints for regions
for j in range(num_regions):
    model.addConstr(sum(x[i, j] for i in range(num_power_plants)) + sum(y[k, j] for k in range(num_renewable_sources)) + unmet_demand[j] >= demand[j], name=f"demand_constraint_{j}")

# Optimize the model
model.optimize()

# Output the results
if model.status == GRB.OPTIMAL:
    print("Optimal solution found:")
    for i in range(num_power_plants):
        for j in range(num_regions):
            print(f"Power Plant {i} to Region {j}: {x[i, j].x} units")
    for k in range(num_renewable_sources):
        for j in range(num_regions):
            print(f"Renewable Source {k} to Region {j}: {y[k, j].x} units")
    for j in range(num_regions):
        print(f"Unmet demand in Region {j}: {unmet_demand[j].x} units")
else:
    print("No optimal solution found.")
```