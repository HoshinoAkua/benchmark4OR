import gurobipy as gp
from gurobipy import GRB
import json

# Load data from JSON file
with open('data.json', 'r') as f:
    data = json.load(f)

reservoirs = data['reservoirs']
fields = data['fields']
costs = data['costs']
evaporation_rates = data['evaporation_rates']

num_reservoirs = len(reservoirs)
num_fields = len(fields)

# Create a new model
model = gp.Model("water_resource_management")

# Create decision variables
x = model.addVars(num_reservoirs, num_fields, name="x", lb=0)

# Set objective: Minimize total transportation cost
model.setObjective(gp.quicksum(costs[i][j] * x[i, j] for i in range(num_reservoirs) for j in range(num_fields)), GRB.MINIMIZE)

# Add constraints: The total amount of water transported from each reservoir cannot exceed its capacity
for i in range(num_reservoirs):
    model.addConstr(gp.quicksum(x[i, j] for j in range(num_fields)) <= reservoirs[i], name=f"Reservoir_{i}_capacity")

# Add constraints: The total amount of water received by each field must meet its requirement, considering evaporation losses
for j in range(num_fields):
    model.addConstr(gp.quicksum(x[i, j] * (1 - evaporation_rates[i][j]) for i in range(num_reservoirs)) >= fields[j], name=f"Field_{j}_requirement")

# Optimize the model
model.optimize()

# Print the solution
if model.status == GRB.OPTIMAL:
    print("Optimal solution found:")
    for i in range(num_reservoirs):
        for j in range(num_fields):
            print(f"Water transported from Reservoir {i} to Field {j}: {x[i, j].x}")
else:
    print("No optimal solution found.")