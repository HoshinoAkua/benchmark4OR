import json
from gurobipy import Model, GRB

# Transportation Problem with Renewable Energy Integration
# Problem type: LP
# Domain: energy_distribution
# Variant description: This variant includes the integration of renewable energy sources with variable generation capacities. The objective is to minimize the total cost, including both transmission costs and penalties for unmet demand.

# Read data
with open('data.json', 'r') as f:
    data = json.load(f)

### Read parameters from data
supply = data['supply']  # the generation capacities of each power plant
demand = data['demand']  # the energy demands of each region
cost = data['cost']  # the transmission costs from each power plant to each region
renewable_supply = data['renewable_supply']  # the generation capacities of renewable sources
penalty_cost = data['penalty_cost']  # penalty cost for unmet demand

### Get hyperparameters from parameters
num_plants = len(supply)  # number of power plants
num_regions = len(demand)  # number of regions
num_renewables = len(renewable_supply)  # number of renewable sources

# Create a new model
model = Model("Transportation Problem with Renewable Energy Integration")

### Add variables
# The amount of electricity transported from each power plant to each region
x = model.addVars(num_plants, num_regions, vtype=GRB.CONTINUOUS, name="x")
# The amount of electricity transported from each renewable source to each region
y = model.addVars(num_renewables, num_regions, vtype=GRB.CONTINUOUS, name="y")
# The amount of unmet demand in each region
unmet_demand = model.addVars(num_regions, vtype=GRB.CONTINUOUS, name="unmet_demand")

### Set objective
# Minimize the total transmission cost and penalty for unmet demand
model.setObjective(
    sum(cost[i][j] * x[i, j] for i in range(num_plants) for j in range(num_regions)) +
    sum(penalty_cost[j] * unmet_demand[j] for j in range(num_regions)),
    GRB.MINIMIZE
)

### Add constraints
# The total amount of electricity supplied by each power plant cannot exceed its capacity
for i in range(num_plants):
    model.addConstr(sum(x[i, j] for j in range(num_regions)) <= supply[i], name=f"supply_{i}")

# The total amount of electricity supplied by each renewable source cannot exceed its capacity
for k in range(num_renewables):
    model.addConstr(sum(y[k, j] for j in range(num_regions)) <= renewable_supply[k], name=f"renewable_supply_{k}")

# The total amount of electricity received by each region must meet its demand, considering unmet demand
for j in range(num_regions):
    model.addConstr(sum(x[i, j] for i in range(num_plants)) + sum(y[k, j] for k in range(num_renewables)) + unmet_demand[j] >= demand[j], name=f"demand_{j}")

# Save the model as a '.lp' file.
model.write('model.lp')