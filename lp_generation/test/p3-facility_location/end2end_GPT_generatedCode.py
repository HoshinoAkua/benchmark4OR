'''
This is file is completely generated by GPT4o

Input--
problem_summary
数据指引
数据到字母的mapping

Output--
如下
'''
import json
from pyscipopt import Model, quicksum

# Load data
with open("data.json", "r") as file:
    data = json.load(file)

# Extract data
sites = list(range(data["F"]))
vicinities = list(range(data["C"]))
openStoreCosts = data["f-{i}"]
serviceCosts = data["c-{i j}"]
siteCapacity = data["M-{i}"]
demandPerZone = data["d-{j}"]

# Create a new model
model = Model("Retail Expansion")

# Create variables
x = {}
y = {}

for i in sites:
    x[i] = model.addVar(vtype="B", name=f"x_{i}")

for i in sites:
    for j in vicinities:
        y[i, j] = model.addVar(vtype="B", name=f"y_{i}_{j}")

# Set the objective function
model.setObjective(
    quicksum(openStoreCosts[str(i)] * x[i] for i in sites) + 
    quicksum(serviceCosts[str(i)][str(j)] * y[i, j] for i in sites for j in vicinities),
    "minimize"
)

# Add constraints
# Each customer zone must be served by at least one store
for j in vicinities:
    model.addCons(quicksum(y[i, j] for i in sites) >= 1, name=f"serve_{j}")

# A store must be established at a site before it can serve any customer zone
for i in sites:
    for j in vicinities:
        model.addCons(y[i, j] <= x[i], name=f"establish_{i}_{j}")

# Each store can serve a limited number of customer zones based on its capacity
for i in sites:
    model.addCons(quicksum(y[i, j] for j in vicinities) <= siteCapacity[str(i)] * x[i], name=f"capacity_{i}")

# Optimize the model
model.writeProblem('facility_location-test.lp')
