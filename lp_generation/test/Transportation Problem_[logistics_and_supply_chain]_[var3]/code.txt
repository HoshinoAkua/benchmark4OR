import json
from gurobipy import Model, GRB

# Transportation Problem with Perishable Goods
# Problem type: LP
# Domain: logistics_and_supply_chain
# Variant description: This variant of the classical transportation problem includes perishability constraints. Each type of good has a maximum allowable transportation time, and the transportation time between each warehouse and store is given. The transportation cost is also dependent on the transportation time.

# Read data
with open('data.json', 'r') as f:
    data = json.load(f)

### Read parameters from data
supply = data['supply']  # the supply available at each warehouse
demand = data['demand']  # the demand required at each retail store
cost = data['cost']  # the transportation cost from each warehouse to each retail store
time = data['time']  # the transportation time from each warehouse to each retail store
max_time = data['max_time']  # the maximum allowable transportation time for each type of good

### Get hyperparameter from parameters
num_warehouses = len(supply)  # number of warehouses
num_stores = len(demand)  # number of retail stores

# Create a new model
model = Model("Transportation Problem with Perishable Goods")

### Add variables
# x[i,j] is the amount transported from warehouse i to store j
x = model.addVars(num_warehouses, num_stores, vtype=GRB.CONTINUOUS, name="x")

### Set objective
# Minimize the total transportation cost
model.setObjective(sum(cost[i][j] * x[i, j] for i in range(num_warehouses) for j in range(num_stores)), GRB.MINIMIZE)

### Add constraints
# Supply constraints: the total amount transported from each warehouse cannot exceed its supply
for i in range(num_warehouses):
    model.addConstr(sum(x[i, j] for j in range(num_stores)) <= supply[i], name=f"supply_{i}")

# Demand constraints: the total amount transported to each store must meet its demand
for j in range(num_stores):
    model.addConstr(sum(x[i, j] for i in range(num_warehouses)) >= demand[j], name=f"demand_{j}")

# Perishability constraints: the transportation time from each warehouse to each store must not exceed the maximum allowable transportation time for the goods
for i in range(num_warehouses):
    for j in range(num_stores):
        model.addConstr(time[i][j] * x[i, j] <= max_time, name=f"perishability_{i}_{j}")

# Save the model as a '.lp' file.
model.write('model.lp')