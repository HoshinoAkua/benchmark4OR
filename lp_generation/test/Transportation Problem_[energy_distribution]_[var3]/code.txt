import json
from gurobipy import Model, GRB

# Transportation Problem with Emission Constraints
# Problem type: LP
# Domain: energy_distribution
# Variant description: This variant includes emission constraints for each power plant. The objective is to minimize the total transmission cost while ensuring that the emissions from each power plant do not exceed specified limits.

# Read data
with open('data.json', 'r') as f:
    data = json.load(f)

### Read parameters from data
supply = data['supply']  # the generation capacities of each power plant
demand = data['demand']  # the energy demands of each region
cost = data['cost']  # the transmission costs from each power plant to each region
emission_rate = data['emission_rate']  # the emission rate per unit of electricity generated by each power plant
emission_limit = data['emission_limit']  # the maximum allowable emissions for each power plant

### Get hyperparameters from parameters
num_plants = len(supply)  # number of power plants
num_regions = len(demand)  # number of regions

# Create a new model
model = Model("Transportation Problem with Emission Constraints")

### Add variables
# The amount of electricity transported from each power plant to each region
x = model.addVars(num_plants, num_regions, vtype=GRB.CONTINUOUS, name="x")

### Set objective
# Minimize the total transmission cost
model.setObjective(sum(cost[i][j] * x[i, j] for i in range(num_plants) for j in range(num_regions)), GRB.MINIMIZE)

### Add constraints
# The total amount of electricity supplied by each power plant cannot exceed its capacity
for i in range(num_plants):
    model.addConstr(sum(x[i, j] for j in range(num_regions)) <= supply[i], name=f"supply_{i}")

# The total amount of electricity received by each region must meet its demand
for j in range(num_regions):
    model.addConstr(sum(x[i, j] for i in range(num_plants)) >= demand[j], name=f"demand_{j}")

# The emissions from each power plant must not exceed the emission limit
for i in range(num_plants):
    model.addConstr(sum(emission_rate[i] * x[i, j] for j in range(num_regions)) <= emission_limit[i], name=f"emission_{i}")

# Save the model as a '.lp' file.
model.write('model.lp')